@model IndexViewModel;

@foreach (var point in Model.Points)
{
    point.Description = null!;
}
<!-- The map will be initialized in the element with id="map" -->
<div class="h-100 w-100 position-absolute" id="map"></div>

<button id="side-menu-button" class="navbar-toggler position-fixed bg-white mt-4" type="button"
    data-bs-toggle="offcanvas" data-bs-target="#side-menu">
    <i class="bi bi-list fs-1"></i>
</button>

<div class="show position-absolute offcanvas offcanvas-start h-100 " style="padding-left: 0px; padding-right: 0px;" data-bs-scroll="true" data-bs-backdrop="false"
    id="side-menu">
    <div class="offcanvas-header">
        <h4>Points menu</h4>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>

    </div>
    <div class="offcanvas-body">
        <div class="dropdown">
            <button class="btn btn-primary dropdown-toggle" type="button" data-bs-toggle="dropdown"
                data-bs-auto-close="outside">Filter Accounts</button>
            <ul class="dropdown-menu">
                @foreach (var account in Model.Accounts)
                {
                    <li>
                        <a class="dropdown-item">
                            <input id="@account.Email" class=" form-check-input mt-0" type="checkbox" autocomplete="off"
                                value="@account.Email">
                            <label class="form-check-label" for="@account.Email"> @account.Email </label>
                        </a>
                    </li>
                }
            </ul>
        </div>
        <br />
        <div class="container" style="padding-left: 0px">
            <table class='table table-striped table-hover'>
                <tr class="title">
                    <th>Title</th>
                    @foreach (var point in Model.Points)
                    {
                        @if (point?.Account?.Email == User.Identities.First().Name)
                        {
                            <th>Edit</th>
                            <th>Delete</th>
                            break;
                        }
                    }
                </tr>
                @foreach (var point in Model.Points)
                {
                    // When clicking anywhere on the row, then browser is redirected to the correct info page
                    <tr class="@point?.Account?.Email" onclick="location.href = `Point/Show/@point?.PointId`"
                        style="cursor: pointer;">
                        <td>@point?.Name</td>
                        @if (point?.Account?.Email == User.Identities.First().Name)
                        {
                            <td> 
                                <a asp-action="Edit" asp-controller="Point" asp-route-id="@point?.PointId" class="btn btn-primary" onclick="event.stopPropagation();">
                                    <i class="bi bi-pencil"></i>
                                </a>
                            </td>
                                
                            <td>
                                <form asp-action="Delete" asp-controller="Point" asp-route-id="@point?.PointId" method="post">
                                <button type="submit"
                                    class="btn btn-danger"
                                    onclick="event.stopPropagation(); return confirm('Are you sure you want to delete this point?');">
                                    <i class="bi bi-trash"></i></button>
                                </form>
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>

    </div>
</div>

@section Scripts {
    <!-- Load the Google Maps JavaScript API -->
    <script>(g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({ key: "AIzaSyDj6Q00TsPeLZ-yo3U2mG3O7fGerCZjn-Y", v: "weekly" });</script>


    <script type="module">
        // IndexViewData is used to send data from the server to the client
        // This approach avoids the use of global variables or functions
        import { IndexViewData } from '/js/index.js';


        // Serializes the C# points array to JSON format
        // Html.Raw ensures the generated JSON string is raw text and not HTML encoded
        IndexViewData.pointsJSON = '@Html.Raw(Json.Serialize(Model.Points))';
    </script>
    <script type="module">
        import { filterPoints } from '/js/index.js';
        import { resetPoints } from '/js/index.js';


        //Selects all checkboxes
        let checkboxes = document.querySelectorAll('.form-check-input');

        checkboxes.forEach((checkbox) => {
            checkbox.addEventListener('click', function () {
                //Stores the values of checked checkboxes
                let checkedValues = [];



                checkboxes.forEach((checkbox) => {
                    if (checkbox.checked) {
                        //add value of checkboxes to array if checkbox is checked
                        checkedValues.push(checkbox.value);
                    }
                });
                if (checkedValues.length != 0) {
                    //Filters the markers on the map based on selected accounts
                    filterPoints(checkedValues)

                    // Hides points from the side menu table
                    // Loops through all tr elements
                    $('tr').each(function () {
                        var hasClass = false;
                        for (var i = 0; i < checkedValues.length; i++) {
                            // If the tr has a class which is in the array, hasClass gets set to true
                            if ($(this).hasClass(checkedValues[i])) {
                                hasClass = true;
                                $(this).show();
                                break;
                            }
                        }
                        // If the tr does not have a class which is in the array
                        if (!hasClass) {
                            // Hides the tr
                            $(this).not(".title").hide();
                        }
                    });
                }
                else {
                    //If no accounts are selected, then resets filtering to make all points show
                    resetPoints()
                    // Makes all objects in the table visible again
                    $('tr').show();
                }

                checkedValues = []
            });
        });
    </script>

    <script>

    </script>
    <script type="module" src="~/js/index.js"></script>

}