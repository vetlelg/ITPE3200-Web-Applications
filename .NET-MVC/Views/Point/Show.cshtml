@model ShowPointViewModel

@using System.Security.Claims;

<!-- Shows information about a point -->
<div class="container bg">
    <div class="row rounded bg-show m-5">
        <div class="col-12 col-md-12 col-lg-8 text-center">
            <h1>@Model?.Point?.Name</h1>
            <hr>
            <h4><i class="bi bi-card-text"></i> Description: @Model?.Point?.Description</h4>
            <h4><i class="bi bi-geo-alt-fill"></i> Position: (@Model?.Point?.Latitude, @Model?.Point?.Longitude)</h4>
            <h4><i class="bi bi-person-badge"></i> Account: @Model?.Point?.Account?.Email</h4>
            @if (Model?.Point?.Comments?.Count > 0)
            {
                <h4>Average <i class="bi bi-star-fill"></i> @Model.AvgRating()</h4>
            }

            @if (@Model?.Point?.Account?.Email == User.Identities.First().Name)
            {
                <a asp-action="Edit" asp-controller="Point" asp-route-id="@Model?.Point?.PointId" class="btn btn-primary m-1"><i
                        class="bi bi-pencil"></i></a>
                <form asp-action="Delete" asp-controller="Point" asp-route-id="@Model?.Point?.PointId" method="post" className="m-1" style="display: inline-block;">
                <button type="submit" class="btn btn-danger"
                    onclick="return confirm('Are you sure you want to delete this point?');"><i class="bi bi-trash"></i></button>
                </form>
            }
            <a asp-action="Index" asp-controller="Home" class="btn btn-secondary m-1">Cancel</a>

            <hr>
            <div id="carousel" class="carousel slide mx-auto" style="max-width: 800px;">
                @if (Model?.Images != null && Model.Images.Count > 0)
                {
                    <div class="carousel-indicators">
    
                        @for (int i = 0; i < Model.Images.Count; i++)
                        {
                            if (i == 0)
                            {
                                <button type="button" data-bs-target="#carousel" data-bs-slide-to="@i" class="active"
                                    aria-current="true" aria-label="Slide 1"></button>
                            }
                            else
                            {
                                <button type="button" data-bs-target="#carousel" data-bs-slide-to="@i"
                                    aria-label="Slide @i"></button>
                            }
                        }
                    </div>
                    <div class="carousel-inner bg-black">
                        @for (int i = 0; i < Model.Images.Count; i++)
                        {
                            // only one image should get the active class
                            if (i == 0)
                            {
                                <div class="carousel-item active">
                                    <img src="@Model.Images[i].FilePath" class="d-block carousel-image rounded" alt="Image @i"
                                        data-bs-toggle="modal" data-bs-target="#imageModal" onclick="openModal(@i)" />
                                </div>
                            }
                            else
                            {
                                <div class="carousel-item">
                                    <img src="@Model.Images[i].FilePath" class="d-block carousel-image" alt="Image @i"
                                        data-bs-toggle="modal" data-bs-target="#imageModal" onclick="openModal(@i)" />
                                </div>
                            }

                        }
                        <!-- button for navigating between pictures. Can also use left/right arrow key -->
                        <button class="carousel-control-prev" type="button" data-bs-target="#carousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>


                }
                else
                {
                    <p>No images available.</p>
                }
            </div>
            <div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-body text-center">
                            <img id="modalImage" src="" class="img-fluid" alt="Large Image" />
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-12 col-md-12 col-lg-4">
            <h1>Comments</h1>
            <table class='table table-striped overflow-auto' style="max-height: 550px; display: block;">

                @if (Model?.Point?.Comments == null)
                {
                    throw new Exception("List of points were null");
                }
                @foreach (var comment in Model.Point.Comments)
                {   
                    <tr>
                        <td><span class="fw-bold">@comment?.Account?.Email:</span> @comment?.Text
                            <br />
                            Rating:

                            @for (var i = 1; i <= 5; i++)
                            {
                                if (comment?.Rating >= i)
                                {
                                    <i class="bi bi-star-fill"></i>
                                }
                                else
                                {
                                    <i class="bi bi-star"></i>
                                }
                            }
                        </td>
                        
                        @{
                            // Check the logged in user created the comment
                            string sessionIdentifier = ClaimTypes.NameIdentifier;
                            string? accountId = User.FindFirstValue(sessionIdentifier);
                            if (comment?.AccountId == accountId)
                            {
                                <td>
                                    <form asp-action="DeleteComment" asp-controller="Point" asp-route-id="@Model.Point.PointId,@comment?.CommentId" method="post">
                                    <button type="submit"  class="btn btn-danger"
                                        onclick="return confirm('Are you sure you want to delete this comment?');"><i
                                            class="bi bi-trash"></i></button>
                                    </form>
                                </td>
                            }
                        }
                    </tr>
                }
            </table>
            <form asp-action="CreateComment" onsubmit="return validateRating()">
                <input type="hidden" asp-for="Comment!.PointId" value="@Model.Point.PointId" />
                <div class="form-group">
                    <input asp-for="Comment!.Text" class="form-control" placeholder="Make a comment..." />
                    <span asp-validation-for="Comment!.Text" class="text-danger"></span>
                </div>
                <div class="form-group text-start">
                    <!-- Rating in the form of choosing 1-5 stars -->
                    <div class="rating">
                        <input type="radio" id="star5" name="Comment.Rating" value="5" required /><label for="star5"
                            title="5 stjerner">★</label>
                        <input type="radio" id="star4" name="Comment.Rating" value="4" required /><label for="star4"
                            title="4 stjerner">★</label>
                        <input type="radio" id="star3" name="Comment.Rating" value="3" required /><label for="star3"
                            title="3 stjerner">★</label>
                        <input type="radio" id="star2" name="Comment.Rating" value="2" required /><label for="star2"
                            title="2 stjerner">★</label>
                        <input type="radio" id="star1" name="Comment.Rating" value="1" required /><label for="star1"
                            title="1 stjerne">★</label>
                    </div>
                </div>
                <button class="btn btn-primary m-1" type="submit">Create</button>
                <p id="error-message" style="color: red; display: none;">Choose a rating</p>
            </form>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        var currentImageIndex = 0;
        let images = @Html.Raw(Json.Serialize(Model?.Images?.Select(i => i.FilePath)));

        function openModal(index) {
            currentImageIndex = index;
            updateModalImage();

            document.addEventListener("keydown", handleKeydown)
        }

        function updateModalImage() {
            var modalImage = document.getElementById("modalImage");
            modalImage.src = images[currentImageIndex];
        }

        function prevImage() {

            currentImageIndex = (currentImageIndex > 0) ? currentImageIndex - 1 : images.length - 1;
            updateModalImage();
        }

        function nextImage() {
            currentImageIndex = (currentImageIndex < images.length - 1) ? currentImageIndex + 1 : 0;
            updateModalImage();
        }

        function handleKeydown(event) {
            if (event.key === "ArrowLeft") {
                // left arrow: previous picture
                prevImage();
            } else if (event.key === "ArrowRight") {
                // right arrow: next picture
                nextImage();
            }
        }

        document.getElementById('imageModal').addEventListener('hidden.bs.modal', function () {
            document.removeEventListener("keydown", handleKeydown);
        });

        /* forces the user to give a rating before the comment gets published */
        function validateRating() {
            const rating = document.querySelector('input[name="Comment.Rating"]:checked');
            const errorMessage = document.getElementById("error-message");

            if (!rating) {
                errorMessage.style.display = "block";
                return false;
            }

            errorMessage.style.display = "none";
            return true;
        }
    </script>
}